/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DexApiNodejs);
  }
}(this, function(expect, DexApiNodejs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DexApiNodejs.StakingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StakingApi', function() {
    describe('getDelegations', function() {
      it('should call getDelegations successfully', function(done) {
        //uncomment below and update the code to test getDelegations
        //instance.getDelegations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDelegationsOfValidator', function() {
      it('should call getDelegationsOfValidator successfully', function(done) {
        //uncomment below and update the code to test getDelegationsOfValidator
        //instance.getDelegationsOfValidator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDelegationsToValidator', function() {
      it('should call getDelegationsToValidator successfully', function(done) {
        //uncomment below and update the code to test getDelegationsToValidator
        //instance.getDelegationsToValidator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDelegatorTxs', function() {
      it('should call getDelegatorTxs successfully', function(done) {
        //uncomment below and update the code to test getDelegatorTxs
        //instance.getDelegatorTxs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRedelegations', function() {
      it('should call getRedelegations successfully', function(done) {
        //uncomment below and update the code to test getRedelegations
        //instance.getRedelegations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStakingParameters', function() {
      it('should call getStakingParameters successfully', function(done) {
        //uncomment below and update the code to test getStakingParameters
        //instance.getStakingParameters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStakingPool', function() {
      it('should call getStakingPool successfully', function(done) {
        //uncomment below and update the code to test getStakingPool
        //instance.getStakingPool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUndelegationsBetween', function() {
      it('should call getUndelegationsBetween successfully', function(done) {
        //uncomment below and update the code to test getUndelegationsBetween
        //instance.getUndelegationsBetween(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUndelegationsOfDelegator', function() {
      it('should call getUndelegationsOfDelegator successfully', function(done) {
        //uncomment below and update the code to test getUndelegationsOfDelegator
        //instance.getUndelegationsOfDelegator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUndelegationsOfValidator', function() {
      it('should call getUndelegationsOfValidator successfully', function(done) {
        //uncomment below and update the code to test getUndelegationsOfValidator
        //instance.getUndelegationsOfValidator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getValidator', function() {
      it('should call getValidator successfully', function(done) {
        //uncomment below and update the code to test getValidator
        //instance.getValidator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getValidatorOfDelegator', function() {
      it('should call getValidatorOfDelegator successfully', function(done) {
        //uncomment below and update the code to test getValidatorOfDelegator
        //instance.getValidatorOfDelegator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getValidators', function() {
      it('should call getValidators successfully', function(done) {
        //uncomment below and update the code to test getValidators
        //instance.getValidators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getValidatorsOfDelegator', function() {
      it('should call getValidatorsOfDelegator successfully', function(done) {
        //uncomment below and update the code to test getValidatorsOfDelegator
        //instance.getValidatorsOfDelegator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitDelegation', function() {
      it('should call submitDelegation successfully', function(done) {
        //uncomment below and update the code to test submitDelegation
        //instance.submitDelegation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitRedelegation', function() {
      it('should call submitRedelegation successfully', function(done) {
        //uncomment below and update the code to test submitRedelegation
        //instance.submitRedelegation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('undelegate', function() {
      it('should call undelegate successfully', function(done) {
        //uncomment below and update the code to test undelegate
        //instance.undelegate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
