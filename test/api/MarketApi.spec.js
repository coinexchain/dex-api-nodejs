/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CetLiteForCoinExChain);
  }
}(this, function(expect, CetLiteForCoinExChain) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CetLiteForCoinExChain.MarketApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MarketApi', function() {
    describe('cancelOrder', function() {
      it('should call cancelOrder successfully', function(done) {
        //uncomment below and update the code to test cancelOrder
        //instance.cancelOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelTradingPair', function() {
      it('should call cancelTradingPair successfully', function(done) {
        //uncomment below and update the code to test cancelTradingPair
        //instance.cancelTradingPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGteOrder', function() {
      it('should call createGteOrder successfully', function(done) {
        //uncomment below and update the code to test createGteOrder
        //instance.createGteOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIocOrder', function() {
      it('should call createIocOrder successfully', function(done) {
        //uncomment below and update the code to test createIocOrder
        //instance.createIocOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTradingPair', function() {
      it('should call createTradingPair successfully', function(done) {
        //uncomment below and update the code to test createTradingPair
        //instance.createTradingPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMarketParams', function() {
      it('should call getMarketParams successfully', function(done) {
        //uncomment below and update the code to test getMarketParams
        //instance.getMarketParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrder', function() {
      it('should call getOrder successfully', function(done) {
        //uncomment below and update the code to test getOrder
        //instance.getOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrders', function() {
      it('should call getOrders successfully', function(done) {
        //uncomment below and update the code to test getOrders
        //instance.getOrders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrdersInMarket', function() {
      it('should call getOrdersInMarket successfully', function(done) {
        //uncomment below and update the code to test getOrdersInMarket
        //instance.getOrdersInMarket(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTradingPair', function() {
      it('should call getTradingPair successfully', function(done) {
        //uncomment below and update the code to test getTradingPair
        //instance.getTradingPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyPricePrecision', function() {
      it('should call modifyPricePrecision successfully', function(done) {
        //uncomment below and update the code to test modifyPricePrecision
        //instance.modifyPricePrecision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryTradingPairs', function() {
      it('should call queryTradingPairs successfully', function(done) {
        //uncomment below and update the code to test queryTradingPairs
        //instance.queryTradingPairs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
