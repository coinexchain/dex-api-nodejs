/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DexApiNodejs);
  }
}(this, function(expect, DexApiNodejs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DexApiNodejs.BroadcastTxCommitResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BroadcastTxCommitResult', function() {
    it('should create an instance of BroadcastTxCommitResult', function() {
      // uncomment below and update the code to test BroadcastTxCommitResult
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be.a(DexApiNodejs.BroadcastTxCommitResult);
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property txhash (base name: "txhash")', function() {
      // uncomment below and update the code to test the property txhash
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property data (base name: "data")', function() {
      // uncomment below and update the code to test the property data
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property rawLog (base name: "raw_log")', function() {
      // uncomment below and update the code to test the property rawLog
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property logs (base name: "logs")', function() {
      // uncomment below and update the code to test the property logs
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property info (base name: "info")', function() {
      // uncomment below and update the code to test the property info
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property gasWanted (base name: "gas_wanted")', function() {
      // uncomment below and update the code to test the property gasWanted
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property gasUsed (base name: "gas_used")', function() {
      // uncomment below and update the code to test the property gasUsed
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property codespace (base name: "codespace")', function() {
      // uncomment below and update the code to test the property codespace
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property tx (base name: "tx")', function() {
      // uncomment below and update the code to test the property tx
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instane = new DexApiNodejs.BroadcastTxCommitResult();
      //expect(instance).to.be();
    });

  });

}));
