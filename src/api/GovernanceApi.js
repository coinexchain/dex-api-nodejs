/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BroadcastTxCommitResult from '../model/BroadcastTxCommitResult';
import InlineObject10 from '../model/InlineObject10';
import InlineObject11 from '../model/InlineObject11';
import InlineObject12 from '../model/InlineObject12';
import InlineObject13 from '../model/InlineObject13';
import InlineObject14 from '../model/InlineObject14';
import InlineResponse20018 from '../model/InlineResponse20018';
import InlineResponse20019 from '../model/InlineResponse20019';
import InlineResponse20020 from '../model/InlineResponse20020';
import InlineResponse20021 from '../model/InlineResponse20021';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse20023 from '../model/InlineResponse20023';
import InlineResponse20024 from '../model/InlineResponse20024';
import InlineResponse20025 from '../model/InlineResponse20025';
import InlineResponse20026 from '../model/InlineResponse20026';
import InlineResponse20027 from '../model/InlineResponse20027';
import InlineResponse20028 from '../model/InlineResponse20028';
import StdTx from '../model/StdTx';

/**
* Governance service.
* @module api/GovernanceApi
* @version 3.0
*/
export default class GovernanceApi {

    /**
    * Constructs a new GovernanceApi. 
    * @alias module:api/GovernanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deposit tokens to a proposal
     * Send transaction to deposit tokens to a proposal
     * @param {String} proposalId proposal id
     * @param {module:model/InlineObject13} postDepositBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    depositToProposalWithHttpInfo(proposalId, postDepositBody) {
      let postBody = postDepositBody;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling depositToProposal");
      }
      // verify the required parameter 'postDepositBody' is set
      if (postDepositBody === undefined || postDepositBody === null) {
        throw new Error("Missing the required parameter 'postDepositBody' when calling depositToProposal");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/deposits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deposit tokens to a proposal
     * Send transaction to deposit tokens to a proposal
     * @param {String} proposalId proposal id
     * @param {module:model/InlineObject13} postDepositBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    depositToProposal(proposalId, postDepositBody) {
      return this.depositToProposalWithHttpInfo(proposalId, postDepositBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query deposit
     * Query deposit by proposalId and depositor address
     * @param {String} proposalId proposal id
     * @param {String} depositor Bech32 depositor address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20022} and HTTP response
     */
    getDepositByAddrWithHttpInfo(proposalId, depositor) {
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling getDepositByAddr");
      }
      // verify the required parameter 'depositor' is set
      if (depositor === undefined || depositor === null) {
        throw new Error("Missing the required parameter 'depositor' when calling getDepositByAddr");
      }

      let pathParams = {
        'proposalId': proposalId,
        'depositor': depositor
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/deposits/{depositor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query deposit
     * Query deposit by proposalId and depositor address
     * @param {String} proposalId proposal id
     * @param {String} depositor Bech32 depositor address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20022}
     */
    getDepositByAddr(proposalId, depositor) {
      return this.getDepositByAddrWithHttpInfo(proposalId, depositor)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query governance deposit parameters
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20026} and HTTP response
     */
    getDepositParametersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/gov/parameters/deposit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query governance deposit parameters
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20026}
     */
    getDepositParameters() {
      return this.getDepositParametersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query deposits
     * Query deposits by proposalId
     * @param {String} proposalId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20021} and HTTP response
     */
    getDepositsWithHttpInfo(proposalId) {
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling getDeposits");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/deposits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query deposits
     * Query deposits by proposalId
     * @param {String} proposalId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20021}
     */
    getDeposits(proposalId) {
      return this.getDepositsWithHttpInfo(proposalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query a proposal
     * Query a proposal by id
     * @param {String} proposalId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20019} and HTTP response
     */
    getProposalByIDWithHttpInfo(proposalId) {
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling getProposalByID");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20019;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query a proposal
     * Query a proposal by id
     * @param {String} proposalId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20019}
     */
    getProposalByID(proposalId) {
      return this.getProposalByIDWithHttpInfo(proposalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query proposals
     * Query proposals information with parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.voter voter address
     * @param {String} opts.depositor depositor address
     * @param {String} opts.status proposal status, valid values can be `\"deposit_period\"`, `\"voting_period\"`, `\"passed\"`, `\"rejected\"`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20018} and HTTP response
     */
    getProposalsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'voter': opts['voter'],
        'depositor': opts['depositor'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;
      return this.apiClient.callApi(
        '/gov/proposals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query proposals
     * Query proposals information with parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.voter voter address
     * @param {String} opts.depositor depositor address
     * @param {String} opts.status proposal status, valid values can be `\"deposit_period\"`, `\"voting_period\"`, `\"passed\"`, `\"rejected\"`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20018}
     */
    getProposals(opts) {
      return this.getProposalsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query proposer
     * Query for the proposer for a proposal
     * @param {String} proposalId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20020} and HTTP response
     */
    getProposerWithHttpInfo(proposalId) {
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling getProposer");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/proposer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query proposer
     * Query for the proposer for a proposal
     * @param {String} proposalId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20020}
     */
    getProposer(proposalId) {
      return this.getProposerWithHttpInfo(proposalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a proposal's tally result at the current time
     * Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.
     * @param {String} proposalId proposal id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20025} and HTTP response
     */
    getTallyWithHttpInfo(proposalId) {
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling getTally");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/tally', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a proposal's tally result at the current time
     * Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.
     * @param {String} proposalId proposal id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20025}
     */
    getTally(proposalId) {
      return this.getTallyWithHttpInfo(proposalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query governance tally parameters
     * Query governance tally parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20027} and HTTP response
     */
    getTallyingParametersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;
      return this.apiClient.callApi(
        '/gov/parameters/tallying', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query governance tally parameters
     * Query governance tally parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20027}
     */
    getTallyingParameters() {
      return this.getTallyingParametersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query vote
     * Query vote information by proposal Id and voter address
     * @param {String} proposalId proposal id
     * @param {String} voter Bech32 voter address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20024} and HTTP response
     */
    getVoterByAddrWithHttpInfo(proposalId, voter) {
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling getVoterByAddr");
      }
      // verify the required parameter 'voter' is set
      if (voter === undefined || voter === null) {
        throw new Error("Missing the required parameter 'voter' when calling getVoterByAddr");
      }

      let pathParams = {
        'proposalId': proposalId,
        'voter': voter
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20024;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/votes/{voter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query vote
     * Query vote information by proposal Id and voter address
     * @param {String} proposalId proposal id
     * @param {String} voter Bech32 voter address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20024}
     */
    getVoterByAddr(proposalId, voter) {
      return this.getVoterByAddrWithHttpInfo(proposalId, voter)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query voters
     * Query voters information by proposalId
     * @param {String} proposalId proposal id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20023} and HTTP response
     */
    getVotersWithHttpInfo(proposalId) {
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling getVoters");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/votes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query voters
     * Query voters information by proposalId
     * @param {String} proposalId proposal id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20023}
     */
    getVoters(proposalId) {
      return this.getVotersWithHttpInfo(proposalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query governance voting parameters
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20028} and HTTP response
     */
    getVotingParametersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;
      return this.apiClient.callApi(
        '/gov/parameters/voting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query governance voting parameters
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20028}
     */
    getVotingParameters() {
      return this.getVotingParametersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a community pool spend proposal transaction
     * Generate a community pool spend proposal transaction
     * @param {module:model/InlineObject12} postProposalBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    submitCommunityPoolSpendProposalWithHttpInfo(postProposalBody) {
      let postBody = postProposalBody;
      // verify the required parameter 'postProposalBody' is set
      if (postProposalBody === undefined || postProposalBody === null) {
        throw new Error("Missing the required parameter 'postProposalBody' when calling submitCommunityPoolSpendProposal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/gov/proposals/community_pool_spend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate a community pool spend proposal transaction
     * Generate a community pool spend proposal transaction
     * @param {module:model/InlineObject12} postProposalBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    submitCommunityPoolSpendProposal(postProposalBody) {
      return this.submitCommunityPoolSpendProposalWithHttpInfo(postProposalBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a parameter change proposal transaction
     * Generate a parameter change proposal transaction
     * @param {module:model/InlineObject11} postProposalBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    submitParameterChangeProposalWithHttpInfo(postProposalBody) {
      let postBody = postProposalBody;
      // verify the required parameter 'postProposalBody' is set
      if (postProposalBody === undefined || postProposalBody === null) {
        throw new Error("Missing the required parameter 'postProposalBody' when calling submitParameterChangeProposal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/gov/proposals/param_change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate a parameter change proposal transaction
     * Generate a parameter change proposal transaction
     * @param {module:model/InlineObject11} postProposalBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    submitParameterChangeProposal(postProposalBody) {
      return this.submitParameterChangeProposalWithHttpInfo(postProposalBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit a proposal
     * Send transaction to submit a proposal
     * @param {module:model/InlineObject10} postProposalBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    submitProposalWithHttpInfo(postProposalBody) {
      let postBody = postProposalBody;
      // verify the required parameter 'postProposalBody' is set
      if (postProposalBody === undefined || postProposalBody === null) {
        throw new Error("Missing the required parameter 'postProposalBody' when calling submitProposal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/gov/proposals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit a proposal
     * Send transaction to submit a proposal
     * @param {module:model/InlineObject10} postProposalBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    submitProposal(postProposalBody) {
      return this.submitProposalWithHttpInfo(postProposalBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Vote a proposal
     * Send transaction to vote a proposal
     * @param {String} proposalId proposal id
     * @param {module:model/InlineObject14} postVoteBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    voteProposalWithHttpInfo(proposalId, postVoteBody) {
      let postBody = postVoteBody;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling voteProposal");
      }
      // verify the required parameter 'postVoteBody' is set
      if (postVoteBody === undefined || postVoteBody === null) {
        throw new Error("Missing the required parameter 'postVoteBody' when calling voteProposal");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;
      return this.apiClient.callApi(
        '/gov/proposals/{proposalId}/votes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Vote a proposal
     * Send transaction to vote a proposal
     * @param {String} proposalId proposal id
     * @param {module:model/InlineObject14} postVoteBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    voteProposal(proposalId, postVoteBody) {
      return this.voteProposalWithHttpInfo(proposalId, postVoteBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
