/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BroadcastTxCommitResult from '../model/BroadcastTxCommitResult';
import PaginatedQueryTxs from '../model/PaginatedQueryTxs';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 3.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the broadcastTx operation.
     * @callback module:api/TransactionsApi~broadcastTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastTxCommitResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Broadcast a signed tx
     * Broadcast a signed tx to a full node
     * @param {module:api/TransactionsApi~broadcastTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastTxCommitResult}
     */
    broadcastTx(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/txs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the encodeTx operation.
     * @callback module:api/TransactionsApi~encodeTxCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encode a transaction to the Amino wire format
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @param {module:api/TransactionsApi~encodeTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    encodeTx(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/txs/encode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTxByHash operation.
     * @callback module:api/TransactionsApi~getTxByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastTxCommitResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Tx by hash
     * @param {module:api/TransactionsApi~getTxByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastTxCommitResult}
     */
    getTxByHash(hash, callback) {
      let postBody = null;

      let pathParams = {
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/txs/{hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchTx operation.
     * @callback module:api/TransactionsApi~searchTxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedQueryTxs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search transactions
     * Search transactions by events.
     * @param {Object} opts Optional parameters
     * @param {module:api/TransactionsApi~searchTxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedQueryTxs}
     */
    searchTx(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'message.action': opts['messageAction'],
        'message.sender': opts['messageSender'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedQueryTxs;

      return this.apiClient.callApi(
        '/txs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
