/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import StdTx from '../model/StdTx';

/**
* Bank service.
* @module api/BankApi
* @version 3.0
*/
export default class BankApi {

    /**
    * Constructs a new BankApi. 
    * @alias module:api/BankApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getAddressBalances operation.
     * @callback module:api/BankApi~getAddressBalancesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the account balances
     * @param {module:api/BankApi~getAddressBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    getAddressBalances(address, callback) {
      let postBody = null;

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};

      return this.apiClient.callApi(
        '/bank/balances/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBankParams operation.
     * @callback module:api/BankApi~getBankParamsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current bankx parameters
     * @param {module:api/BankApi~getBankParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getBankParams(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/bank/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendCoins operation.
     * @callback module:api/BankApi~sendCoinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send coins from one account to another
     * @param {module:api/BankApi~sendCoinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    sendCoins(body, address, callback) {
      let postBody = body;

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/bank/accounts/{address}/transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setMemoRequired operation.
     * @callback module:api/BankApi~setMemoRequiredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark if memo is required to receive coins
     * @param {module:api/BankApi~setMemoRequiredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    setMemoRequired(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/bank/accounts/memo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the transferSupervisedCoins operation.
     * @callback module:api/BankApi~transferSupervisedCoinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operate a supervised transfer
     * @param {module:api/BankApi~transferSupervisedCoinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    transferSupervisedCoins(body, address, callback) {
      let postBody = body;

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/bank/accounts/{address}/supervised_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
