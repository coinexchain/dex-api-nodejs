/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Addresses from '../model/Addresses';
import IssueToken from '../model/IssueToken';
import StdTx from '../model/StdTx';
import Whitelist from '../model/Whitelist';

/**
* Asset service.
* @module api/AssetApi
* @version 3.0
*/
export default class AssetApi {

    /**
    * Constructs a new AssetApi. 
    * @alias module:api/AssetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addWhitelist operation.
     * @callback module:api/AssetApi~addWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add forbid whitelist
     * Add forbiddable token whitelist addr
     * @param {module:api/AssetApi~addWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    addWhitelist(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/whitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the burnToken operation.
     * @callback module:api/AssetApi~burnTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burn token
     * Burn burnable token
     * @param {module:api/AssetApi~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    burnToken(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/burns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the forbidAddr operation.
     * @callback module:api/AssetApi~forbidAddrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forbid address
     * Add forbidden addresses
     * @param {module:api/AssetApi~forbidAddrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    forbidAddr(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the forbidToken operation.
     * @callback module:api/AssetApi~forbidTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forbid token
     * Forbid forbiddable token
     * @param {module:api/AssetApi~forbidTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    forbidToken(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAssetParams operation.
     * @callback module:api/AssetApi~getAssetParamsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current asset parameters
     * @param {module:api/AssetApi~getAssetParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAssetParams(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getForbiddenAddresses operation.
     * @callback module:api/AssetApi~getForbiddenAddressesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * query forbidden addresses
     * Get forbidden addresses with provided &#x60;symbol&#x60;
     * @param {module:api/AssetApi~getForbiddenAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getForbiddenAddresses(symbol, callback) {
      let postBody = null;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReservedSymbols operation.
     * @callback module:api/AssetApi~getReservedSymbolsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reserved symbols
     * List all reserved symbols
     * @param {module:api/AssetApi~getReservedSymbolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getReservedSymbols(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/reserved/symbols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/AssetApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * queryToken
     * Get token with provided &#x60;symbol&#x60;
     * @param {module:api/AssetApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getToken(symbol, callback) {
      let postBody = null;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTokenList operation.
     * @callback module:api/AssetApi~getTokenListCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tokens
     * List all existing tokens
     * @param {module:api/AssetApi~getTokenListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getTokenList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWhitelist operation.
     * @callback module:api/AssetApi~getWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * queryWhitelist
     * Get token whitelist with provided &#x60;symbol&#x60;
     * @param {module:api/AssetApi~getWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getWhitelist(symbol, callback) {
      let postBody = null;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/whitelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueToken operation.
     * @callback module:api/AssetApi~issueTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue token
     * Issue a new Token
     * @param {module:api/AssetApi~issueTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    issueToken(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the mintToken operation.
     * @callback module:api/AssetApi~mintTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint token
     * Mint mintable token
     * @param {module:api/AssetApi~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    mintToken(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/mints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyTokenInfo operation.
     * @callback module:api/AssetApi~modifyTokenInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify token info
     * Modify token info
     * @param {module:api/AssetApi~modifyTokenInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    modifyTokenInfo(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/infos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeWhitelist operation.
     * @callback module:api/AssetApi~removeWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove forbid whitelist
     * Remove forbiddable token whitelist addr
     * @param {module:api/AssetApi~removeWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    removeWhitelist(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/unforbidden/whitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the transferOwnership operation.
     * @callback module:api/AssetApi~transferOwnershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer ownership
     * Transfer token owner ship
     * @param {module:api/AssetApi~transferOwnershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    transferOwnership(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/ownerships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unForbidAddr operation.
     * @callback module:api/AssetApi~unForbidAddrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnForbid address
     * Remove forbidden addresses
     * @param {module:api/AssetApi~unForbidAddrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    unForbidAddr(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/unforbidden/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unFrobidToken operation.
     * @callback module:api/AssetApi~unFrobidTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnForbid token
     * UnForbid forbiddable token
     * @param {module:api/AssetApi~unFrobidTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    unFrobidToken(body, symbol, callback) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/unforbids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
