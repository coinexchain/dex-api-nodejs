/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Addresses from '../model/Addresses';
import IssueToken from '../model/IssueToken';
import StdTx from '../model/StdTx';
import Whitelist from '../model/Whitelist';

/**
* Asset service.
* @module api/AssetApi
* @version 3.0
*/
export default class AssetApi {

    /**
    * Constructs a new AssetApi. 
    * @alias module:api/AssetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add forbid whitelist
     * Add forbiddable token whitelist addr
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    addWhitelistWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/whitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add forbid whitelist
     * Add forbiddable token whitelist addr
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    addWhitelist(body, symbol) {
      return this.addWhitelistWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Burn token
     * Burn burnable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    burnTokenWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/burns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Burn token
     * Burn burnable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    burnToken(body, symbol) {
      return this.burnTokenWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Forbid address
     * Add forbidden addresses
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    forbidAddrWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Forbid address
     * Add forbidden addresses
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    forbidAddr(body, symbol) {
      return this.forbidAddrWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Forbid token
     * Forbid forbiddable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    forbidTokenWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Forbid token
     * Forbid forbiddable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    forbidToken(body, symbol) {
      return this.forbidTokenWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current asset parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getAssetParamsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the current asset parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getAssetParams() {
      return this.getAssetParamsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * query forbidden addresses
     * Get forbidden addresses with provided &#x60;symbol&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getForbiddenAddressesWithHttpInfo(symbol) {
      let postBody = null;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * query forbidden addresses
     * Get forbidden addresses with provided &#x60;symbol&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getForbiddenAddresses(symbol) {
      return this.getForbiddenAddressesWithHttpInfo(symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List reserved symbols
     * List all reserved symbols
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getReservedSymbolsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/reserved/symbols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List reserved symbols
     * List all reserved symbols
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getReservedSymbols() {
      return this.getReservedSymbolsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * queryToken
     * Get token with provided &#x60;symbol&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getTokenWithHttpInfo(symbol) {
      let postBody = null;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * queryToken
     * Get token with provided &#x60;symbol&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getToken(symbol) {
      return this.getTokenWithHttpInfo(symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List tokens
     * List all existing tokens
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getTokenListWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List tokens
     * List all existing tokens
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getTokenList() {
      return this.getTokenListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * queryWhitelist
     * Get token whitelist with provided &#x60;symbol&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getWhitelistWithHttpInfo(symbol) {
      let postBody = null;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/forbidden/whitelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * queryWhitelist
     * Get token whitelist with provided &#x60;symbol&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getWhitelist(symbol) {
      return this.getWhitelistWithHttpInfo(symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Issue token
     * Issue a new Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    issueTokenWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Issue token
     * Issue a new Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    issueToken(body) {
      return this.issueTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mint token
     * Mint mintable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    mintTokenWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/mints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Mint token
     * Mint mintable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    mintToken(body, symbol) {
      return this.mintTokenWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify token info
     * Modify token info
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    modifyTokenInfoWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/infos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify token info
     * Modify token info
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    modifyTokenInfo(body, symbol) {
      return this.modifyTokenInfoWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove forbid whitelist
     * Remove forbiddable token whitelist addr
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    removeWhitelistWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/unforbidden/whitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove forbid whitelist
     * Remove forbiddable token whitelist addr
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    removeWhitelist(body, symbol) {
      return this.removeWhitelistWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer ownership
     * Transfer token owner ship
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    transferOwnershipWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/ownerships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Transfer ownership
     * Transfer token owner ship
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    transferOwnership(body, symbol) {
      return this.transferOwnershipWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UnForbid address
     * Remove forbidden addresses
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    unForbidAddrWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/unforbidden/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UnForbid address
     * Remove forbidden addresses
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    unForbidAddr(body, symbol) {
      return this.unForbidAddrWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UnForbid token
     * UnForbid forbiddable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    unFrobidTokenWithHttpInfo(body, symbol) {
      let postBody = body;

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/asset/tokens/{symbol}/unforbids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UnForbid token
     * UnForbid forbiddable token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    unFrobidToken(body, symbol) {
      return this.unFrobidTokenWithHttpInfo(body, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
