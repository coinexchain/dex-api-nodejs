/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20058 from '../model/InlineResponse20058';
import InlineResponse20059 from '../model/InlineResponse20059';
import InlineResponse20060 from '../model/InlineResponse20060';
import InlineResponse20061 from '../model/InlineResponse20061';

/**
* Expiry service.
* @module api/ExpiryApi
* @version 3.0
*/
export default class ExpiryApi {

    /**
    * Constructs a new ExpiryApi. 
    * @alias module:api/ExpiryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Query redelegation
     * Query delegator's redelegation-completion info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count limited to 1024
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20058} and HTTP response
     */
    queryRedelegationWithHttpInfo(account, time, sid, count) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling queryRedelegation");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling queryRedelegation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling queryRedelegation");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling queryRedelegation");
      }

      let pathParams = {
      };
      let queryParams = {
        'account': account,
        'time': time,
        'sid': sid,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20058;
      return this.apiClient.callApi(
        '/expiry/redelegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query redelegation
     * Query delegator's redelegation-completion info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count limited to 1024
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20058}
     */
    queryRedelegation(account, time, sid, count) {
      return this.queryRedelegationWithHttpInfo(account, time, sid, count)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query Unbonding
     * Query delegator's unbonding-completion info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20059} and HTTP response
     */
    queryUnbondingWithHttpInfo(account, time, sid, count) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling queryUnbonding");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling queryUnbonding");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling queryUnbonding");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling queryUnbonding");
      }

      let pathParams = {
      };
      let queryParams = {
        'account': account,
        'time': time,
        'sid': sid,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20059;
      return this.apiClient.callApi(
        '/expiry/unbondings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query Unbonding
     * Query delegator's unbonding-completion info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20059}
     */
    queryUnbonding(account, time, sid, count) {
      return this.queryUnbondingWithHttpInfo(account, time, sid, count)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query Unlock
     * Query Unlock info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20061} and HTTP response
     */
    queryUnlockWithHttpInfo(account, time, sid, count, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling queryUnlock");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling queryUnlock");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling queryUnlock");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling queryUnlock");
      }

      let pathParams = {
      };
      let queryParams = {
        'account': account,
        'time': time,
        'sid': sid,
        'count': count,
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20061;
      return this.apiClient.callApi(
        '/expiry/unlocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query Unlock
     * Query Unlock info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20061}
     */
    queryUnlock(account, time, sid, count, opts) {
      return this.queryUnlockWithHttpInfo(account, time, sid, count, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query lock tx
     * Query lock transfer info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20060} and HTTP response
     */
    querylockedWithHttpInfo(account, time, sid, count, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling querylocked");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling querylocked");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling querylocked");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling querylocked");
      }

      let pathParams = {
      };
      let queryParams = {
        'account': account,
        'time': time,
        'sid': sid,
        'count': count,
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20060;
      return this.apiClient.callApi(
        '/expiry/lockeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query lock tx
     * Query lock transfer info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20060}
     */
    querylocked(account, time, sid, count, opts) {
      return this.querylockedWithHttpInfo(account, time, sid, count, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
