/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject26 from '../model/InlineObject26';
import InlineObject27 from '../model/InlineObject27';
import InlineObject28 from '../model/InlineObject28';
import InlineResponse20042 from '../model/InlineResponse20042';
import InlineResponse20043 from '../model/InlineResponse20043';
import InlineResponse20044 from '../model/InlineResponse20044';
import InlineResponse20045 from '../model/InlineResponse20045';
import InlineResponse20046 from '../model/InlineResponse20046';
import InlineResponse20047 from '../model/InlineResponse20047';
import StdTx from '../model/StdTx';
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Market service.
* @module api/MarketApi
* @version 3.0
*/
export default class MarketApi {

    /**
    * Constructs a new MarketApi. 
    * @alias module:api/MarketApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel the order
     * @param {module:model/InlineObject27} orderInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    cancelOrderWithHttpInfo(orderInfo) {
      let postBody = orderInfo;
      // verify the required parameter 'orderInfo' is set
      if (orderInfo === undefined || orderInfo === null) {
        throw new Error("Missing the required parameter 'orderInfo' when calling cancelOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/market/cancel-order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel the order
     * @param {module:model/InlineObject27} orderInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    cancelOrder(orderInfo) {
      return this.cancelOrderWithHttpInfo(orderInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel the trading-pair
     * @param {module:model/InlineObject28} info 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    cancelTradingPairWithHttpInfo(info) {
      let postBody = info;
      // verify the required parameter 'info' is set
      if (info === undefined || info === null) {
        throw new Error("Missing the required parameter 'info' when calling cancelTradingPair");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/market/cancel-trading-pair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel the trading-pair
     * @param {module:model/InlineObject28} info 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    cancelTradingPair(info) {
      return this.cancelTradingPairWithHttpInfo(info)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create GTE order in blockchain
     * @param {module:model/UNKNOWN_BASE_TYPE} orderInfo create order tx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    createGteOrderWithHttpInfo(orderInfo) {
      let postBody = orderInfo;
      // verify the required parameter 'orderInfo' is set
      if (orderInfo === undefined || orderInfo === null) {
        throw new Error("Missing the required parameter 'orderInfo' when calling createGteOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/market/gte-orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create GTE order in blockchain
     * @param {module:model/UNKNOWN_BASE_TYPE} orderInfo create order tx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    createGteOrder(orderInfo) {
      return this.createGteOrderWithHttpInfo(orderInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create IOC order in blockchain
     * @param {module:model/UNKNOWN_BASE_TYPE} orderInfo create order tx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    createIocOrderWithHttpInfo(orderInfo) {
      let postBody = orderInfo;
      // verify the required parameter 'orderInfo' is set
      if (orderInfo === undefined || orderInfo === null) {
        throw new Error("Missing the required parameter 'orderInfo' when calling createIocOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/market/ioc-orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create IOC order in blockchain
     * @param {module:model/UNKNOWN_BASE_TYPE} orderInfo create order tx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    createIocOrder(orderInfo) {
      return this.createIocOrderWithHttpInfo(orderInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create trading-pair in blockchain
     * @param {module:model/UNKNOWN_BASE_TYPE} info Create trading-pair
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    createTradingPairWithHttpInfo(info) {
      let postBody = info;
      // verify the required parameter 'info' is set
      if (info === undefined || info === null) {
        throw new Error("Missing the required parameter 'info' when calling createTradingPair");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/market/trading-pairs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create trading-pair in blockchain
     * @param {module:model/UNKNOWN_BASE_TYPE} info Create trading-pair
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    createTradingPair(info) {
      return this.createTradingPairWithHttpInfo(info)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current market parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20042} and HTTP response
     */
    getMarketParamsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20042;
      return this.apiClient.callApi(
        '/market/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the current market parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20042}
     */
    getMarketParams() {
      return this.getMarketParamsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query order info
     * @param {String} orderId The order id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20046} and HTTP response
     */
    getOrderWithHttpInfo(orderId) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }

      let pathParams = {
        'order-id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20046;
      return this.apiClient.callApi(
        '/market/orders/{order-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query order info
     * @param {String} orderId The order id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20046}
     */
    getOrder(orderId) {
      return this.getOrderWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query user order-id list
     * @param {String} address The user address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20047} and HTTP response
     */
    getOrdersWithHttpInfo(address) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getOrders");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20047;
      return this.apiClient.callApi(
        '/market/orders/account/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query user order-id list
     * @param {String} address The user address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20047}
     */
    getOrders(address) {
      return this.getOrdersWithHttpInfo(address)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query trading-pair's orderbook
     * @param {String} stock stock symbol
     * @param {String} money money symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20045} and HTTP response
     */
    getOrdersInMarketWithHttpInfo(stock, money) {
      let postBody = null;
      // verify the required parameter 'stock' is set
      if (stock === undefined || stock === null) {
        throw new Error("Missing the required parameter 'stock' when calling getOrdersInMarket");
      }
      // verify the required parameter 'money' is set
      if (money === undefined || money === null) {
        throw new Error("Missing the required parameter 'money' when calling getOrdersInMarket");
      }

      let pathParams = {
        'stock': stock,
        'money': money
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20045;
      return this.apiClient.callApi(
        '/market/orderbook/{stock}/{money}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query trading-pair's orderbook
     * @param {String} stock stock symbol
     * @param {String} money money symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20045}
     */
    getOrdersInMarket(stock, money) {
      return this.getOrdersInMarketWithHttpInfo(stock, money)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query trading-pair info
     * @param {String} stock stock symbol
     * @param {String} money money symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20044} and HTTP response
     */
    getTradingPairWithHttpInfo(stock, money) {
      let postBody = null;
      // verify the required parameter 'stock' is set
      if (stock === undefined || stock === null) {
        throw new Error("Missing the required parameter 'stock' when calling getTradingPair");
      }
      // verify the required parameter 'money' is set
      if (money === undefined || money === null) {
        throw new Error("Missing the required parameter 'money' when calling getTradingPair");
      }

      let pathParams = {
        'stock': stock,
        'money': money
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20044;
      return this.apiClient.callApi(
        '/market/trading-pairs/{stock}/{money}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query trading-pair info
     * @param {String} stock stock symbol
     * @param {String} money money symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20044}
     */
    getTradingPair(stock, money) {
      return this.getTradingPairWithHttpInfo(stock, money)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify the price precision of the trading pair in the dex
     * @param {module:model/InlineObject26} info 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    modifyPricePrecisionWithHttpInfo(info) {
      let postBody = info;
      // verify the required parameter 'info' is set
      if (info === undefined || info === null) {
        throw new Error("Missing the required parameter 'info' when calling modifyPricePrecision");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/market/price-precision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Modify the price precision of the trading pair in the dex
     * @param {module:model/InlineObject26} info 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    modifyPricePrecision(info) {
      return this.modifyPricePrecisionWithHttpInfo(info)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query all trading-pair infos in blockchain
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20043} and HTTP response
     */
    queryTradingPairsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20043;
      return this.apiClient.callApi(
        '/market/exist-trading-pairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query all trading-pair infos in blockchain
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20043}
     */
    queryTradingPairs() {
      return this.queryTradingPairsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
