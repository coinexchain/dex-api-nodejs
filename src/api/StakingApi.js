/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BroadcastTxCommitResult from '../model/BroadcastTxCommitResult';
import PaginatedQueryTxs from '../model/PaginatedQueryTxs';
import StdTx from '../model/StdTx';

/**
* Staking service.
* @module api/StakingApi
* @version 3.0
*/
export default class StakingApi {

    /**
    * Constructs a new StakingApi. 
    * @alias module:api/StakingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getDelegations operation.
     * @callback module:api/StakingApi~getDelegationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all delegations from a delegator
     * @param {module:api/StakingApi~getDelegationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDelegations(delegatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDelegationsOfValidator operation.
     * @callback module:api/StakingApi~getDelegationsOfValidatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all delegations from a validator
     * @param {module:api/StakingApi~getDelegationsOfValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDelegationsOfValidator(validatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}/delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDelegationsToValidator operation.
     * @callback module:api/StakingApi~getDelegationsToValidatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the current delegation between a delegator and a validator
     * @param {module:api/StakingApi~getDelegationsToValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDelegationsToValidator(delegatorAddr, validatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDelegatorTxs operation.
     * @callback module:api/StakingApi~getDelegatorTxsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaginatedQueryTxs>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all staking txs (i.e msgs) from a delegator
     * @param {module:api/StakingApi~getDelegatorTxsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaginatedQueryTxs>}
     */
    getDelegatorTxs(delegatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaginatedQueryTxs];

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/txs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRedelegations operation.
     * @callback module:api/StakingApi~getRedelegationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all redelegations (filter by query params)
     * @param {Object} opts Optional parameters
     * @param {module:api/StakingApi~getRedelegationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getRedelegations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'delegator': opts['delegator'],
        'validator_from': opts['validatorFrom'],
        'validator_to': opts['validatorTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/redelegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStakingParameters operation.
     * @callback module:api/StakingApi~getStakingParametersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current staking parameter values
     * @param {module:api/StakingApi~getStakingParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getStakingParameters(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStakingPool operation.
     * @callback module:api/StakingApi~getStakingPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current state of the staking pool
     * @param {module:api/StakingApi~getStakingPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getStakingPool(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/pool', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUndelegationsBetween operation.
     * @callback module:api/StakingApi~getUndelegationsBetweenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query all unbonding delegations between a delegator and a validator
     * @param {module:api/StakingApi~getUndelegationsBetweenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getUndelegationsBetween(delegatorAddr, validatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUndelegationsOfDelegator operation.
     * @callback module:api/StakingApi~getUndelegationsOfDelegatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all unbonding delegations from a delegator
     * @param {module:api/StakingApi~getUndelegationsOfDelegatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getUndelegationsOfDelegator(delegatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUndelegationsOfValidator operation.
     * @callback module:api/StakingApi~getUndelegationsOfValidatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all unbonding delegations from a validator
     * @param {module:api/StakingApi~getUndelegationsOfValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getUndelegationsOfValidator(validatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}/unbonding_delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getValidator operation.
     * @callback module:api/StakingApi~getValidatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the information from a single validator
     * @param {module:api/StakingApi~getValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getValidator(validatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getValidatorOfDelegator operation.
     * @callback module:api/StakingApi~getValidatorOfDelegatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query a validator that a delegator is bonded to
     * @param {module:api/StakingApi~getValidatorOfDelegatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getValidatorOfDelegator(delegatorAddr, validatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/validators/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getValidators operation.
     * @callback module:api/StakingApi~getValidatorsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all validator candidates. By default it returns only the bonded validators.
     * @param {Object} opts Optional parameters
     * @param {module:api/StakingApi~getValidatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getValidators(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getValidatorsOfDelegator operation.
     * @callback module:api/StakingApi~getValidatorsOfDelegatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query all validators that a delegator is bonded to
     * @param {module:api/StakingApi~getValidatorsOfDelegatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getValidatorsOfDelegator(delegatorAddr, callback) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/validators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitDelegation operation.
     * @callback module:api/StakingApi~submitDelegationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastTxCommitResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit delegation
     * @param {module:api/StakingApi~submitDelegationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastTxCommitResult}
     */
    submitDelegation(delegatorAddr, opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitRedelegation operation.
     * @callback module:api/StakingApi~submitRedelegationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a redelegation
     * @param {module:api/StakingApi~submitRedelegationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    submitRedelegation(delegatorAddr, opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/redelegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the undelegate operation.
     * @callback module:api/StakingApi~undelegateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastTxCommitResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit an unbonding delegation
     * @param {module:api/StakingApi~undelegateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastTxCommitResult}
     */
    undelegate(delegatorAddr, opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
