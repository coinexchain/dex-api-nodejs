/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BroadcastTxCommitResult from '../model/BroadcastTxCommitResult';
import InlineObject6 from '../model/InlineObject6';
import InlineObject7 from '../model/InlineObject7';
import InlineObject8 from '../model/InlineObject8';
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse20011 from '../model/InlineResponse20011';
import InlineResponse20012 from '../model/InlineResponse20012';
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse20014 from '../model/InlineResponse20014';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse2009 from '../model/InlineResponse2009';
import PaginatedQueryTxs from '../model/PaginatedQueryTxs';
import StdTx from '../model/StdTx';

/**
* Staking service.
* @module api/StakingApi
* @version 3.0
*/
export default class StakingApi {

    /**
    * Constructs a new StakingApi. 
    * @alias module:api/StakingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all delegations from a delegator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    getDelegationsWithHttpInfo(delegatorAddr) {
      let postBody = null;
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling getDelegations");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all delegations from a delegator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    getDelegations(delegatorAddr) {
      return this.getDelegationsWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all delegations from a validator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    getDelegationsOfValidatorWithHttpInfo(validatorAddr) {
      let postBody = null;
      // verify the required parameter 'validatorAddr' is set
      if (validatorAddr === undefined || validatorAddr === null) {
        throw new Error("Missing the required parameter 'validatorAddr' when calling getDelegationsOfValidator");
      }

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}/delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all delegations from a validator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    getDelegationsOfValidator(validatorAddr) {
      return this.getDelegationsOfValidatorWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query the current delegation between a delegator and a validator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    getDelegationsToValidatorWithHttpInfo(delegatorAddr, validatorAddr) {
      let postBody = null;
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling getDelegationsToValidator");
      }
      // verify the required parameter 'validatorAddr' is set
      if (validatorAddr === undefined || validatorAddr === null) {
        throw new Error("Missing the required parameter 'validatorAddr' when calling getDelegationsToValidator");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query the current delegation between a delegator and a validator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
     */
    getDelegationsToValidator(delegatorAddr, validatorAddr) {
      return this.getDelegationsToValidatorWithHttpInfo(delegatorAddr, validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all staking txs (i.e msgs) from a delegator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaginatedQueryTxs>} and HTTP response
     */
    getDelegatorTxsWithHttpInfo(delegatorAddr) {
      let postBody = null;
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling getDelegatorTxs");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaginatedQueryTxs];
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/txs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all staking txs (i.e msgs) from a delegator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaginatedQueryTxs>}
     */
    getDelegatorTxs(delegatorAddr) {
      return this.getDelegatorTxsWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all redelegations (filter by query params)
     * @param {Object} opts Optional parameters
     * @param {String} opts.delegator Bech32 AccAddress of Delegator
     * @param {String} opts.validatorFrom Bech32 ValAddress of SrcValidator
     * @param {String} opts.validatorTo Bech32 ValAddress of DstValidator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response
     */
    getRedelegationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'delegator': opts['delegator'],
        'validator_from': opts['validatorFrom'],
        'validator_to': opts['validatorTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/staking/redelegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all redelegations (filter by query params)
     * @param {Object} opts Optional parameters
     * @param {String} opts.delegator Bech32 AccAddress of Delegator
     * @param {String} opts.validatorFrom Bech32 ValAddress of SrcValidator
     * @param {String} opts.validatorTo Bech32 ValAddress of DstValidator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009}
     */
    getRedelegations(opts) {
      return this.getRedelegationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current staking parameter values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    getStakingParametersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;
      return this.apiClient.callApi(
        '/staking/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the current staking parameter values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    getStakingParameters() {
      return this.getStakingParametersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current state of the staking pool
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response
     */
    getStakingPoolWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;
      return this.apiClient.callApi(
        '/staking/pool', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the current state of the staking pool
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}
     */
    getStakingPool() {
      return this.getStakingPoolWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query all unbonding delegations between a delegator and a validator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    getUndelegationsBetweenWithHttpInfo(delegatorAddr, validatorAddr) {
      let postBody = null;
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling getUndelegationsBetween");
      }
      // verify the required parameter 'validatorAddr' is set
      if (validatorAddr === undefined || validatorAddr === null) {
        throw new Error("Missing the required parameter 'validatorAddr' when calling getUndelegationsBetween");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query all unbonding delegations between a delegator and a validator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}
     */
    getUndelegationsBetween(delegatorAddr, validatorAddr) {
      return this.getUndelegationsBetweenWithHttpInfo(delegatorAddr, validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all unbonding delegations from a delegator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    getUndelegationsOfDelegatorWithHttpInfo(delegatorAddr) {
      let postBody = null;
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling getUndelegationsOfDelegator");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all unbonding delegations from a delegator
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    getUndelegationsOfDelegator(delegatorAddr) {
      return this.getUndelegationsOfDelegatorWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all unbonding delegations from a validator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getUndelegationsOfValidatorWithHttpInfo(validatorAddr) {
      let postBody = null;
      // verify the required parameter 'validatorAddr' is set
      if (validatorAddr === undefined || validatorAddr === null) {
        throw new Error("Missing the required parameter 'validatorAddr' when calling getUndelegationsOfValidator");
      }

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;
      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}/unbonding_delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all unbonding delegations from a validator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}
     */
    getUndelegationsOfValidator(validatorAddr) {
      return this.getUndelegationsOfValidatorWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query the information from a single validator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    getValidatorWithHttpInfo(validatorAddr) {
      let postBody = null;
      // verify the required parameter 'validatorAddr' is set
      if (validatorAddr === undefined || validatorAddr === null) {
        throw new Error("Missing the required parameter 'validatorAddr' when calling getValidator");
      }

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query the information from a single validator
     * @param {String} validatorAddr Bech32 OperatorAddress of validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}
     */
    getValidator(validatorAddr) {
      return this.getValidatorWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query a validator that a delegator is bonded to
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {String} validatorAddr Bech32 ValAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    getValidatorOfDelegatorWithHttpInfo(delegatorAddr, validatorAddr) {
      let postBody = null;
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling getValidatorOfDelegator");
      }
      // verify the required parameter 'validatorAddr' is set
      if (validatorAddr === undefined || validatorAddr === null) {
        throw new Error("Missing the required parameter 'validatorAddr' when calling getValidatorOfDelegator");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/validators/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query a validator that a delegator is bonded to
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {String} validatorAddr Bech32 ValAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}
     */
    getValidatorOfDelegator(delegatorAddr, validatorAddr) {
      return this.getValidatorOfDelegatorWithHttpInfo(delegatorAddr, validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all validator candidates. By default it returns only the bonded validators.
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.
     * @param {Number} opts.page The page number.
     * @param {Number} opts.limit The maximum number of items per page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    getValidatorsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/staking/validators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all validator candidates. By default it returns only the bonded validators.
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.
     * @param {Number} opts.page The page number.
     * @param {Number} opts.limit The maximum number of items per page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}
     */
    getValidators(opts) {
      return this.getValidatorsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query all validators that a delegator is bonded to
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    getValidatorsOfDelegatorWithHttpInfo(delegatorAddr) {
      let postBody = null;
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling getValidatorsOfDelegator");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/validators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query all validators that a delegator is bonded to
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}
     */
    getValidatorsOfDelegator(delegatorAddr) {
      return this.getValidatorsOfDelegatorWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit delegation
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject6} opts.delegation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    submitDelegationWithHttpInfo(delegatorAddr, opts) {
      opts = opts || {};
      let postBody = opts['delegation'];
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling submitDelegation");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit delegation
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject6} opts.delegation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    submitDelegation(delegatorAddr, opts) {
      return this.submitDelegationWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit a redelegation
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject8} opts.delegation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    submitRedelegationWithHttpInfo(delegatorAddr, opts) {
      opts = opts || {};
      let postBody = opts['delegation'];
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling submitRedelegation");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/redelegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit a redelegation
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject8} opts.delegation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    submitRedelegation(delegatorAddr, opts) {
      return this.submitRedelegationWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit an unbonding delegation
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject7} opts.delegation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    undelegateWithHttpInfo(delegatorAddr, opts) {
      opts = opts || {};
      let postBody = opts['delegation'];
      // verify the required parameter 'delegatorAddr' is set
      if (delegatorAddr === undefined || delegatorAddr === null) {
        throw new Error("Missing the required parameter 'delegatorAddr' when calling undelegate");
      }

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;
      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit an unbonding delegation
     * @param {String} delegatorAddr Bech32 AccAddress of Delegator
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject7} opts.delegation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    undelegate(delegatorAddr, opts) {
      return this.undelegateWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
