/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BroadcastTxCommitResult from '../model/BroadcastTxCommitResult';
import PaginatedQueryTxs from '../model/PaginatedQueryTxs';
import StdTx from '../model/StdTx';

/**
* Staking service.
* @module api/StakingApi
* @version 3.0
*/
export default class StakingApi {

    /**
    * Constructs a new StakingApi. 
    * @alias module:api/StakingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all delegations from a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getDelegationsWithHttpInfo(delegatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all delegations from a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getDelegations(delegatorAddr) {
      return this.getDelegationsWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all delegations from a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getDelegationsOfValidatorWithHttpInfo(validatorAddr) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}/delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all delegations from a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getDelegationsOfValidator(validatorAddr) {
      return this.getDelegationsOfValidatorWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query the current delegation between a delegator and a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getDelegationsToValidatorWithHttpInfo(delegatorAddr, validatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query the current delegation between a delegator and a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getDelegationsToValidator(delegatorAddr, validatorAddr) {
      return this.getDelegationsToValidatorWithHttpInfo(delegatorAddr, validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all staking txs (i.e msgs) from a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaginatedQueryTxs>} and HTTP response
     */
    getDelegatorTxsWithHttpInfo(delegatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaginatedQueryTxs];

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/txs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all staking txs (i.e msgs) from a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaginatedQueryTxs>}
     */
    getDelegatorTxs(delegatorAddr) {
      return this.getDelegatorTxsWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all redelegations (filter by query params)
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getRedelegationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'delegator': opts['delegator'],
        'validator_from': opts['validatorFrom'],
        'validator_to': opts['validatorTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/redelegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all redelegations (filter by query params)
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getRedelegations(opts) {
      return this.getRedelegationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current staking parameter values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getStakingParametersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the current staking parameter values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getStakingParameters() {
      return this.getStakingParametersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current state of the staking pool
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getStakingPoolWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/pool', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the current state of the staking pool
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getStakingPool() {
      return this.getStakingPoolWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query all unbonding delegations between a delegator and a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getUndelegationsBetweenWithHttpInfo(delegatorAddr, validatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query all unbonding delegations between a delegator and a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getUndelegationsBetween(delegatorAddr, validatorAddr) {
      return this.getUndelegationsBetweenWithHttpInfo(delegatorAddr, validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all unbonding delegations from a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getUndelegationsOfDelegatorWithHttpInfo(delegatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all unbonding delegations from a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getUndelegationsOfDelegator(delegatorAddr) {
      return this.getUndelegationsOfDelegatorWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all unbonding delegations from a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getUndelegationsOfValidatorWithHttpInfo(validatorAddr) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}/unbonding_delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all unbonding delegations from a validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getUndelegationsOfValidator(validatorAddr) {
      return this.getUndelegationsOfValidatorWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query the information from a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getValidatorWithHttpInfo(validatorAddr) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query the information from a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getValidator(validatorAddr) {
      return this.getValidatorWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query a validator that a delegator is bonded to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getValidatorOfDelegatorWithHttpInfo(delegatorAddr, validatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/validators/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query a validator that a delegator is bonded to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getValidatorOfDelegator(delegatorAddr, validatorAddr) {
      return this.getValidatorOfDelegatorWithHttpInfo(delegatorAddr, validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all validator candidates. By default it returns only the bonded validators.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getValidatorsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/validators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all validator candidates. By default it returns only the bonded validators.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getValidators(opts) {
      return this.getValidatorsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query all validators that a delegator is bonded to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getValidatorsOfDelegatorWithHttpInfo(delegatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/validators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query all validators that a delegator is bonded to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getValidatorsOfDelegator(delegatorAddr) {
      return this.getValidatorsOfDelegatorWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit delegation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    submitDelegationWithHttpInfo(delegatorAddr, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/delegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Submit delegation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    submitDelegation(delegatorAddr, opts) {
      return this.submitDelegationWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit a redelegation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    submitRedelegationWithHttpInfo(delegatorAddr, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/redelegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Submit a redelegation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    submitRedelegation(delegatorAddr, opts) {
      return this.submitRedelegationWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit an unbonding delegation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    undelegateWithHttpInfo(delegatorAddr, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/staking/delegators/{delegatorAddr}/unbonding_delegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Submit an unbonding delegation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    undelegate(delegatorAddr, opts) {
      return this.undelegateWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
