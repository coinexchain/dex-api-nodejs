/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import StdTx from '../model/StdTx';

/**
* Comment service.
* @module api/CommentApi
* @version 3.0
*/
export default class CommentApi {

    /**
    * Constructs a new CommentApi. 
    * @alias module:api/CommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the followupComment operation.
     * @callback module:api/CommentApi~followupCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a follow-up comment under some thread
     * @param {module:api/CommentApi~followupCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    followupComment(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/comment/followup-comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the newThread operation.
     * @callback module:api/CommentApi~newThreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a new comment to open a new thread
     * @param {module:api/CommentApi~newThreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    newThread(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/comment/new-thread', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rewardComments operation.
     * @callback module:api/CommentApi~rewardCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StdTx} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reward some comments with coins
     * @param {module:api/CommentApi~rewardCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StdTx}
     */
    rewardComments(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/comment/reward-comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
