/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject30 from '../model/InlineObject30';
import InlineObject31 from '../model/InlineObject31';
import InlineObject32 from '../model/InlineObject32';
import InlineResponse20063 from '../model/InlineResponse20063';
import StdTx from '../model/StdTx';

/**
* Comment service.
* @module api/CommentApi
* @version 3.0
*/
export default class CommentApi {

    /**
    * Constructs a new CommentApi. 
    * @alias module:api/CommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Post a follow-up comment under some thread
     * @param {module:model/InlineObject31} followupCommentReq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    followupCommentWithHttpInfo(followupCommentReq) {
      let postBody = followupCommentReq;
      // verify the required parameter 'followupCommentReq' is set
      if (followupCommentReq === undefined || followupCommentReq === null) {
        throw new Error("Missing the required parameter 'followupCommentReq' when calling followupComment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/comment/followup-comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post a follow-up comment under some thread
     * @param {module:model/InlineObject31} followupCommentReq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    followupComment(followupCommentReq) {
      return this.followupCommentWithHttpInfo(followupCommentReq)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post a new comment to open a new thread
     * @param {module:model/InlineObject30} newThreadReq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    newThreadWithHttpInfo(newThreadReq) {
      let postBody = newThreadReq;
      // verify the required parameter 'newThreadReq' is set
      if (newThreadReq === undefined || newThreadReq === null) {
        throw new Error("Missing the required parameter 'newThreadReq' when calling newThread");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/comment/new-thread', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post a new comment to open a new thread
     * @param {module:model/InlineObject30} newThreadReq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    newThread(newThreadReq) {
      return this.newThreadWithHttpInfo(newThreadReq)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query token comment
     * Query all comments about given token until to time
     * @param {String} token Symbol
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier comment count limited to 1024
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20063} and HTTP response
     */
    queryCommentWithHttpInfo(token, time, sid, count) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling queryComment");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling queryComment");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling queryComment");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling queryComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'time': time,
        'sid': sid,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20063;
      return this.apiClient.callApi(
        '/comment/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query token comment
     * Query all comments about given token until to time
     * @param {String} token Symbol
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier comment count limited to 1024
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20063}
     */
    queryComment(token, time, sid, count) {
      return this.queryCommentWithHttpInfo(token, time, sid, count)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reward some comments with coins
     * @param {module:model/InlineObject32} rewardCommentsReq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    rewardCommentsWithHttpInfo(rewardCommentsReq) {
      let postBody = rewardCommentsReq;
      // verify the required parameter 'rewardCommentsReq' is set
      if (rewardCommentsReq === undefined || rewardCommentsReq === null) {
        throw new Error("Missing the required parameter 'rewardCommentsReq' when calling rewardComments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;
      return this.apiClient.callApi(
        '/comment/reward-comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reward some comments with coins
     * @param {module:model/InlineObject32} rewardCommentsReq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    rewardComments(rewardCommentsReq) {
      return this.rewardCommentsWithHttpInfo(rewardCommentsReq)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
