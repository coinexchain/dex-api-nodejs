/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BroadcastTxCommitResult from '../model/BroadcastTxCommitResult';
import StdTx from '../model/StdTx';

/**
* Distribution service.
* @module api/DistributionApi
* @version 3.0
*/
export default class DistributionApi {

    /**
    * Constructs a new DistributionApi. 
    * @alias module:api/DistributionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Donate to the community pool
     * Donate some amount of cet to the community pool
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StdTx} and HTTP response
     */
    donateToCommunityPoolWithHttpInfo(body, accAddress) {
      let postBody = body;

      let pathParams = {
        'accAddress': accAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StdTx;

      return this.apiClient.callApi(
        '/distribution/{accAddress}/donates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Donate to the community pool
     * Donate some amount of cet to the community pool
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StdTx}
     */
    donateToCommunityPool(body, accAddress) {
      return this.donateToCommunityPoolWithHttpInfo(body, accAddress)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the total rewards balance from all delegations
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getAllRewardsWithHttpInfo(delegatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/delegators/{delegatorAddr}/rewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the total rewards balance from all delegations
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getAllRewards(delegatorAddr) {
      return this.getAllRewardsWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Community pool parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCommunityPoolWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/community_pool', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Community pool parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCommunityPool() {
      return this.getCommunityPoolWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validator distribution information
     * Query the distribution information of a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getDistributionInfoWithHttpInfo(validatorAddr) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/validators/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Validator distribution information
     * Query the distribution information of a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getDistributionInfo(validatorAddr) {
      return this.getDistributionInfoWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fee distribution parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getDistributionParamsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fee distribution parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getDistributionParams() {
      return this.getDistributionParamsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fee distribution outstanding rewards of a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getOutstandingRewardsWithHttpInfo(validatorAddr) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/validators/{validatorAddr}/outstanding_rewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fee distribution outstanding rewards of a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getOutstandingRewards(validatorAddr) {
      return this.getOutstandingRewardsWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query a delegation reward
     * Query a single delegation reward by a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getRewardByValidatorWithHttpInfo(delegatorAddr, validatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query a delegation reward
     * Query a single delegation reward by a delegator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getRewardByValidator(delegatorAddr, validatorAddr) {
      return this.getRewardByValidatorWithHttpInfo(delegatorAddr, validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Commission and self-delegation rewards of a single validator
     * Query the commission and self-delegation rewards of validator.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getValidatorRewardsWithHttpInfo(validatorAddr) {
      let postBody = null;

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/validators/{validatorAddr}/rewards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Commission and self-delegation rewards of a single validator
     * Query the commission and self-delegation rewards of validator.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getValidatorRewards(validatorAddr) {
      return this.getValidatorRewardsWithHttpInfo(validatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the rewards withdrawal address
     * Get the delegations&#x27; rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getWithdrawAddressWithHttpInfo(delegatorAddr) {
      let postBody = null;

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/distribution/delegators/{delegatorAddr}/withdraw_address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the rewards withdrawal address
     * Get the delegations&#x27; rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getWithdrawAddress(delegatorAddr) {
      return this.getWithdrawAddressWithHttpInfo(delegatorAddr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the rewards withdrawal address
     * Replace the delegations&#x27; rewards withdrawal address for a new one.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    setWithdrawAddressWithHttpInfo(delegatorAddr, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/distribution/delegators/{delegatorAddr}/withdraw_address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the rewards withdrawal address
     * Replace the delegations&#x27; rewards withdrawal address for a new one.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    setWithdrawAddress(delegatorAddr, opts) {
      return this.setWithdrawAddressWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Withdraw all the delegator&#x27;s delegation rewards
     * Withdraw all the delegator&#x27;s delegation rewards
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    withdrawAllRewardsWithHttpInfo(delegatorAddr, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/distribution/delegators/{delegatorAddr}/rewards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw all the delegator&#x27;s delegation rewards
     * Withdraw all the delegator&#x27;s delegation rewards
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    withdrawAllRewards(delegatorAddr, opts) {
      return this.withdrawAllRewardsWithHttpInfo(delegatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Withdraw the validator&#x27;s rewards
     * Withdraw the validator&#x27;s self-delegation and commissions rewards
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    withdrawAllValidatorRewardsWithHttpInfo(validatorAddr, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/distribution/validators/{validatorAddr}/rewards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw the validator&#x27;s rewards
     * Withdraw the validator&#x27;s self-delegation and commissions rewards
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    withdrawAllValidatorRewards(validatorAddr, opts) {
      return this.withdrawAllValidatorRewardsWithHttpInfo(validatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Withdraw a delegation reward
     * Withdraw a delegator&#x27;s delegation reward from a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BroadcastTxCommitResult} and HTTP response
     */
    withdrawRewardsByValidatorWithHttpInfo(delegatorAddr, validatorAddr, opts) {
      let postBody = opts['body'];

      let pathParams = {
        'delegatorAddr': delegatorAddr,
        'validatorAddr': validatorAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastTxCommitResult;

      return this.apiClient.callApi(
        '/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw a delegation reward
     * Withdraw a delegator&#x27;s delegation reward from a single validator
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BroadcastTxCommitResult}
     */
    withdrawRewardsByValidator(delegatorAddr, validatorAddr, opts) {
      return this.withdrawRewardsByValidatorWithHttpInfo(delegatorAddr, validatorAddr, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
