/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20062 from '../model/InlineResponse20062';
import Tx from '../model/Tx';

/**
* Tx service.
* @module api/TxApi
* @version 3.0
*/
export default class TxApi {

    /**
    * Constructs a new TxApi. 
    * @alias module:api/TxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a Tx from trade server by hash
     * @param {String} hash Tx hash
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tx} and HTTP response
     */
    getTxFromTradeServerWithHttpInfo(hash) {
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getTxFromTradeServer");
      }

      let pathParams = {
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tx;
      return this.apiClient.callApi(
        '/tx/txs/{hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Tx from trade server by hash
     * @param {String} hash Tx hash
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tx}
     */
    getTxFromTradeServer(hash) {
      return this.getTxFromTradeServerWithHttpInfo(hash)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query account all income until to given time
     * Query income info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count limited to 1024
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20062} and HTTP response
     */
    queryIncomeWithHttpInfo(account, time, sid, count, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling queryIncome");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling queryIncome");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling queryIncome");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling queryIncome");
      }

      let pathParams = {
      };
      let queryParams = {
        'account': account,
        'time': time,
        'sid': sid,
        'count': count,
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20062;
      return this.apiClient.callApi(
        '/tx/incomes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query account all income until to given time
     * Query income info
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count limited to 1024
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20062}
     */
    queryIncome(account, time, sid, count, opts) {
      return this.queryIncomeWithHttpInfo(account, time, sid, count, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query transactions
     * Query transactions signed by given account until to given time
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count limited to 1024
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20062} and HTTP response
     */
    queryTxWithHttpInfo(account, time, sid, count, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling queryTx");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling queryTx");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling queryTx");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling queryTx");
      }

      let pathParams = {
      };
      let queryParams = {
        'account': account,
        'time': time,
        'sid': sid,
        'count': count,
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20062;
      return this.apiClient.callApi(
        '/tx/txs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query transactions
     * Query transactions signed by given account until to given time
     * @param {String} account Bech32 address
     * @param {Number} time Unix timestamp
     * @param {Number} sid Sequence id
     * @param {Number} count Querier count limited to 1024
     * @param {Object} opts Optional parameters
     * @param {String} opts.token Symbol
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20062}
     */
    queryTx(account, time, sid, count, opts) {
      return this.queryTxWithHttpInfo(account, time, sid, count, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
