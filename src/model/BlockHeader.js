/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockHeaderVersion from './BlockHeaderVersion';
import BlockID from './BlockID';

/**
 * The BlockHeader model module.
 * @module model/BlockHeader
 * @version 3.0
 */
class BlockHeader {
    /**
     * Constructs a new <code>BlockHeader</code>.
     * @alias module:model/BlockHeader
     * @param chainId {String} 
     * @param height {Number} 
     * @param time {String} 
     * @param numTxs {Number} 
     * @param lastBlockId {module:model/BlockID} 
     * @param totalTxs {Number} 
     * @param lastCommitHash {String} 
     * @param dataHash {String} 
     * @param validatorsHash {String} 
     * @param nextValidatorsHash {String} 
     * @param consensusHash {String} 
     * @param appHash {String} 
     * @param lastResultsHash {String} 
     * @param evidenceHash {String} 
     * @param proposerAddress {String} bech32 encoded address
     * @param version {module:model/BlockHeaderVersion} 
     */
    constructor(chainId, height, time, numTxs, lastBlockId, totalTxs, lastCommitHash, dataHash, validatorsHash, nextValidatorsHash, consensusHash, appHash, lastResultsHash, evidenceHash, proposerAddress, version) { 
        
        BlockHeader.initialize(this, chainId, height, time, numTxs, lastBlockId, totalTxs, lastCommitHash, dataHash, validatorsHash, nextValidatorsHash, consensusHash, appHash, lastResultsHash, evidenceHash, proposerAddress, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chainId, height, time, numTxs, lastBlockId, totalTxs, lastCommitHash, dataHash, validatorsHash, nextValidatorsHash, consensusHash, appHash, lastResultsHash, evidenceHash, proposerAddress, version) { 
        obj['chain_id'] = chainId;
        obj['height'] = height;
        obj['time'] = time;
        obj['num_txs'] = numTxs;
        obj['last_block_id'] = lastBlockId;
        obj['total_txs'] = totalTxs;
        obj['last_commit_hash'] = lastCommitHash;
        obj['data_hash'] = dataHash;
        obj['validators_hash'] = validatorsHash;
        obj['next_validators_hash'] = nextValidatorsHash;
        obj['consensus_hash'] = consensusHash;
        obj['app_hash'] = appHash;
        obj['last_results_hash'] = lastResultsHash;
        obj['evidence_hash'] = evidenceHash;
        obj['proposer_address'] = proposerAddress;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>BlockHeader</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlockHeader} obj Optional instance to populate.
     * @return {module:model/BlockHeader} The populated <code>BlockHeader</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlockHeader();

            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
            if (data.hasOwnProperty('num_txs')) {
                obj['num_txs'] = ApiClient.convertToType(data['num_txs'], 'Number');
            }
            if (data.hasOwnProperty('last_block_id')) {
                obj['last_block_id'] = BlockID.constructFromObject(data['last_block_id']);
            }
            if (data.hasOwnProperty('total_txs')) {
                obj['total_txs'] = ApiClient.convertToType(data['total_txs'], 'Number');
            }
            if (data.hasOwnProperty('last_commit_hash')) {
                obj['last_commit_hash'] = ApiClient.convertToType(data['last_commit_hash'], 'String');
            }
            if (data.hasOwnProperty('data_hash')) {
                obj['data_hash'] = ApiClient.convertToType(data['data_hash'], 'String');
            }
            if (data.hasOwnProperty('validators_hash')) {
                obj['validators_hash'] = ApiClient.convertToType(data['validators_hash'], 'String');
            }
            if (data.hasOwnProperty('next_validators_hash')) {
                obj['next_validators_hash'] = ApiClient.convertToType(data['next_validators_hash'], 'String');
            }
            if (data.hasOwnProperty('consensus_hash')) {
                obj['consensus_hash'] = ApiClient.convertToType(data['consensus_hash'], 'String');
            }
            if (data.hasOwnProperty('app_hash')) {
                obj['app_hash'] = ApiClient.convertToType(data['app_hash'], 'String');
            }
            if (data.hasOwnProperty('last_results_hash')) {
                obj['last_results_hash'] = ApiClient.convertToType(data['last_results_hash'], 'String');
            }
            if (data.hasOwnProperty('evidence_hash')) {
                obj['evidence_hash'] = ApiClient.convertToType(data['evidence_hash'], 'String');
            }
            if (data.hasOwnProperty('proposer_address')) {
                obj['proposer_address'] = ApiClient.convertToType(data['proposer_address'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = BlockHeaderVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} chain_id
 */
BlockHeader.prototype['chain_id'] = undefined;

/**
 * @member {Number} height
 */
BlockHeader.prototype['height'] = undefined;

/**
 * @member {String} time
 */
BlockHeader.prototype['time'] = undefined;

/**
 * @member {Number} num_txs
 */
BlockHeader.prototype['num_txs'] = undefined;

/**
 * @member {module:model/BlockID} last_block_id
 */
BlockHeader.prototype['last_block_id'] = undefined;

/**
 * @member {Number} total_txs
 */
BlockHeader.prototype['total_txs'] = undefined;

/**
 * @member {String} last_commit_hash
 */
BlockHeader.prototype['last_commit_hash'] = undefined;

/**
 * @member {String} data_hash
 */
BlockHeader.prototype['data_hash'] = undefined;

/**
 * @member {String} validators_hash
 */
BlockHeader.prototype['validators_hash'] = undefined;

/**
 * @member {String} next_validators_hash
 */
BlockHeader.prototype['next_validators_hash'] = undefined;

/**
 * @member {String} consensus_hash
 */
BlockHeader.prototype['consensus_hash'] = undefined;

/**
 * @member {String} app_hash
 */
BlockHeader.prototype['app_hash'] = undefined;

/**
 * @member {String} last_results_hash
 */
BlockHeader.prototype['last_results_hash'] = undefined;

/**
 * @member {String} evidence_hash
 */
BlockHeader.prototype['evidence_hash'] = undefined;

/**
 * bech32 encoded address
 * @member {String} proposer_address
 */
BlockHeader.prototype['proposer_address'] = undefined;

/**
 * @member {module:model/BlockHeaderVersion} version
 */
BlockHeader.prototype['version'] = undefined;






export default BlockHeader;

