/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The Order model module.
* @module model/Order
* @version 3.0
*/
export default class Order {
    /**
    * Constructs a new <code>Order</code>.
    * @alias module:model/Order
    * @class
    * @param orderType {Number} The identify of the price limit : 2; (Currently, only price limit orders are supported)
    * @param tradingPair {String} 
    * @param price {String} 
    * @param quantity {String} 
    * @param side {Number} The buying or selling direction of an order.(buy : 1; sell : 2)
    * @param identify {Number} A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
    */

    constructor(orderType, tradingPair, price, quantity, side, identify) {
        
        
        this['order_type'] = orderType;
        this['trading_pair'] = tradingPair;
        this['price'] = price;
        this['quantity'] = quantity;
        this['side'] = side;
        this['identify'] = identify;
        
    }

    /**
    * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Order} obj Optional instance to populate.
    * @return {module:model/Order} The populated <code>Order</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();
                        
            
            if (data.hasOwnProperty('order_type')) {
                obj['order_type'] = ApiClient.convertToType(data['order_type'], 'Number');
            }
            if (data.hasOwnProperty('trading_pair')) {
                obj['trading_pair'] = ApiClient.convertToType(data['trading_pair'], 'String');
            }
            if (data.hasOwnProperty('price_precision')) {
                obj['price_precision'] = ApiClient.convertToType(data['price_precision'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'String');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], 'Number');
            }
            if (data.hasOwnProperty('identify')) {
                obj['identify'] = ApiClient.convertToType(data['identify'], 'Number');
            }
        }
        return obj;
    }

    /**
    * The identify of the price limit : 2; (Currently, only price limit orders are supported)
    * @member {Number} order_type
    */
    order_type = undefined;
    /**
    * @member {String} trading_pair
    */
    trading_pair = undefined;
    /**
    * @member {String} price_precision
    */
    price_precision = undefined;
    /**
    * @member {String} price
    */
    price = undefined;
    /**
    * @member {String} quantity
    */
    quantity = undefined;
    /**
    * The buying or selling direction of an order.(buy : 1; sell : 2)
    * @member {Number} side
    */
    side = undefined;
    /**
    * A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
    * @member {Number} identify
    */
    identify = undefined;




}
