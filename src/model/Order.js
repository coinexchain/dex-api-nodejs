/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Order model module.
 * @module model/Order
 * @version 3.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * @alias module:model/Order
     * @param orderType {Number} The identify of the price limit : 2; (Currently, only price limit orders are supported)
     * @param tradingPair {String} 
     * @param price {String} 
     * @param quantity {String} 
     * @param side {Number} The buying or selling direction of an order.(buy : 1; sell : 2)
     * @param identify {Number} A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
     */
    constructor(orderType, tradingPair, price, quantity, side, identify) { 
        
        Order.initialize(this, orderType, tradingPair, price, quantity, side, identify);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderType, tradingPair, price, quantity, side, identify) { 
        obj['order_type'] = orderType;
        obj['trading_pair'] = tradingPair;
        obj['price'] = price;
        obj['quantity'] = quantity;
        obj['side'] = side;
        obj['identify'] = identify;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('order_type')) {
                obj['order_type'] = ApiClient.convertToType(data['order_type'], 'Number');
            }
            if (data.hasOwnProperty('trading_pair')) {
                obj['trading_pair'] = ApiClient.convertToType(data['trading_pair'], 'String');
            }
            if (data.hasOwnProperty('price_precision')) {
                obj['price_precision'] = ApiClient.convertToType(data['price_precision'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'String');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], 'Number');
            }
            if (data.hasOwnProperty('identify')) {
                obj['identify'] = ApiClient.convertToType(data['identify'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The identify of the price limit : 2; (Currently, only price limit orders are supported)
 * @member {Number} order_type
 */
Order.prototype['order_type'] = undefined;

/**
 * @member {String} trading_pair
 */
Order.prototype['trading_pair'] = undefined;

/**
 * @member {String} price_precision
 */
Order.prototype['price_precision'] = undefined;

/**
 * @member {String} price
 */
Order.prototype['price'] = undefined;

/**
 * @member {String} quantity
 */
Order.prototype['quantity'] = undefined;

/**
 * The buying or selling direction of an order.(buy : 1; sell : 2)
 * @member {Number} side
 */
Order.prototype['side'] = undefined;

/**
 * A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
 * @member {Number} identify
 */
Order.prototype['identify'] = undefined;






export default Order;

