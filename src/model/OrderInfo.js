/**
 * CET-Lite for CoinEx Chain
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Order from './Order';
import OrderInfoAllOf from './OrderInfoAllOf';

/**
 * The OrderInfo model module.
 * @module model/OrderInfo
 * @version 3.0
 */
class OrderInfo {
    /**
     * Constructs a new <code>OrderInfo</code>.
     * @alias module:model/OrderInfo
     * @extends module:model/Order
     * @implements module:model/Order
     * @implements module:model/OrderInfoAllOf
     * @param orderType {Number} The identify of the price limit : 2; (Currently, only price limit orders are supported)
     * @param tradingPair {String} 
     * @param price {String} 
     * @param quantity {String} 
     * @param side {Number} The buying or selling direction of an order.(buy : 1; sell : 2)
     * @param identify {Number} A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
     */
    constructor(orderType, tradingPair, price, quantity, side, identify) { 
        Order.initialize(this, orderType, tradingPair, price, quantity, side, identify);OrderInfoAllOf.initialize(this);
        OrderInfo.initialize(this, orderType, tradingPair, price, quantity, side, identify);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderType, tradingPair, price, quantity, side, identify) { 
    }

    /**
     * Constructs a <code>OrderInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderInfo} obj Optional instance to populate.
     * @return {module:model/OrderInfo} The populated <code>OrderInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderInfo();
            Order.constructFromObject(data, obj);
            Order.constructFromObject(data, obj);
            OrderInfoAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('time_in_force')) {
                obj['time_in_force'] = ApiClient.convertToType(data['time_in_force'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'String');
            }
            if (data.hasOwnProperty('frozen_fee')) {
                obj['frozen_fee'] = ApiClient.convertToType(data['frozen_fee'], 'String');
            }
            if (data.hasOwnProperty('left_stock')) {
                obj['left_stock'] = ApiClient.convertToType(data['left_stock'], 'String');
            }
            if (data.hasOwnProperty('freeze')) {
                obj['freeze'] = ApiClient.convertToType(data['freeze'], 'String');
            }
            if (data.hasOwnProperty('DealStock')) {
                obj['DealStock'] = ApiClient.convertToType(data['DealStock'], 'String');
            }
            if (data.hasOwnProperty('DealMoney')) {
                obj['DealMoney'] = ApiClient.convertToType(data['DealMoney'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} sender
 */
OrderInfo.prototype['sender'] = undefined;

/**
 * @member {String} sequence
 */
OrderInfo.prototype['sequence'] = undefined;

/**
 * @member {String} time_in_force
 */
OrderInfo.prototype['time_in_force'] = undefined;

/**
 * @member {String} height
 */
OrderInfo.prototype['height'] = undefined;

/**
 * @member {String} frozen_fee
 */
OrderInfo.prototype['frozen_fee'] = undefined;

/**
 * @member {String} left_stock
 */
OrderInfo.prototype['left_stock'] = undefined;

/**
 * @member {String} freeze
 */
OrderInfo.prototype['freeze'] = undefined;

/**
 * @member {String} DealStock
 */
OrderInfo.prototype['DealStock'] = undefined;

/**
 * @member {String} DealMoney
 */
OrderInfo.prototype['DealMoney'] = undefined;


// Implement Order interface:
/**
 * The identify of the price limit : 2; (Currently, only price limit orders are supported)
 * @member {Number} order_type
 */
Order.prototype['order_type'] = undefined;
/**
 * @member {String} trading_pair
 */
Order.prototype['trading_pair'] = undefined;
/**
 * @member {String} price_precision
 */
Order.prototype['price_precision'] = undefined;
/**
 * @member {String} price
 */
Order.prototype['price'] = undefined;
/**
 * @member {String} quantity
 */
Order.prototype['quantity'] = undefined;
/**
 * The buying or selling direction of an order.(buy : 1; sell : 2)
 * @member {Number} side
 */
Order.prototype['side'] = undefined;
/**
 * A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.
 * @member {Number} identify
 */
Order.prototype['identify'] = undefined;
// Implement OrderInfoAllOf interface:
/**
 * @member {String} sender
 */
OrderInfoAllOf.prototype['sender'] = undefined;
/**
 * @member {String} sequence
 */
OrderInfoAllOf.prototype['sequence'] = undefined;
/**
 * @member {String} time_in_force
 */
OrderInfoAllOf.prototype['time_in_force'] = undefined;
/**
 * @member {String} height
 */
OrderInfoAllOf.prototype['height'] = undefined;
/**
 * @member {String} frozen_fee
 */
OrderInfoAllOf.prototype['frozen_fee'] = undefined;
/**
 * @member {String} left_stock
 */
OrderInfoAllOf.prototype['left_stock'] = undefined;
/**
 * @member {String} freeze
 */
OrderInfoAllOf.prototype['freeze'] = undefined;
/**
 * @member {String} DealStock
 */
OrderInfoAllOf.prototype['DealStock'] = undefined;
/**
 * @member {String} DealMoney
 */
OrderInfoAllOf.prototype['DealMoney'] = undefined;




export default OrderInfo;

